# -*- coding: utf-8 -*-
import telebot
from telebot import types
import configparser
import json
import shelve
import dateutil.parser

import controller
from GoogleCalendarApi import GoogleCalendarApi
from SQLighter import SQLighter

config = configparser.ConfigParser()
config.read('config.ini')

bot = telebot.TeleBot(config.get('BOT', 'token'))

db_name = config.get('BOT', 'db_name')
shelve_name = config.get('BOT', 'shelve_name')
with shelve.open(shelve_name) as storage:
    if not 'users' in storage:
        storage['users'] = {}
gcal_api = GoogleCalendarApi()


@bot.message_handler(commands=['start'])
def handle_start_msg(message):
    db = SQLighter(db_name)
    db_user = db.get_user(message.chat.id)
    if not db_user:
        db.insert_user(message.chat.id, message.chat.username,
                       message.chat.first_name, message.chat.last_name)
    controller.show_main_menu(message.chat.id)


@bot.message_handler(commands=['admin'])
def handle_admin_msg(message):
    def process_auth_step(inner_msg):
        db = SQLighter(db_name)
        try:
            message_text = inner_msg.text
            msg_login, msg_password = message_text.split('\n')
            msg_login = msg_login.lower()
            msg_password = msg_password.lower()
            msg_password = controller.get_salted_hash(msg_login, msg_password)
            cfg_login = config.get('ADMIN', 'login')
            cfg_password = config.get('ADMIN', 'password')
            if not (msg_login == cfg_login and msg_password == cfg_password):
                raise Exception('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å')
            db.set_admin(inner_msg.chat.id, 1)
            bot.send_message(inner_msg.chat.id, '–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                             reply_markup=controller.admin_keyboard)
            controller.send_user_questions(inner_msg.chat.id)
        except Exception as e:
            print(str(e))
            bot.send_message(inner_msg.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å',
                             reply_markup=controller.user_keyboard)

    msg = bot.send_message(message.chat.id, '–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ',
                           reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_auth_step)


@bot.message_handler(commands=['networking'])
def handle_networking_command_msg(message):
    db = SQLighter(db_name)
    db.set_user_forward_message(message.chat.id, message.message_id)
    text = '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π'
    bot.send_message(message.chat.id, text)
    handle_networking_msg(message)


def send_calendar_main_msg(message, edit_message=False):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='‚≠ê –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule_my')
    keyboard.add(button)
    buttons = []
    button = types.InlineKeyboardButton(text='–í—Å–µ', callback_data='schedule_getdate_-1')
    buttons.append(button)
    button = types.InlineKeyboardButton(text='–ü–æ –ø–ª–æ—â–∞–¥–∫–∞–º', callback_data='schedule_area')
    buttons.append(button)
    keyboard.add(*buttons)
    html_links = gcal_api.get_html_links()
    text = '–í—ã–±–µ—Ä–∏ –ø–ª–æ—â–∞–¥–∫—É, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
    text += '\n–ï—â–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º. –û–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —Ç–≤–æ–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ ' \
            '<i>(—Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö)</i>.\n'
    text += '\n'.join(html_links)
    if edit_message:
        bot.edit_message_text(text, message.chat.id, message.message_id, parse_mode='HTML', reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=keyboard)


@bot.message_handler(func=lambda msg: msg.text == 'üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def handle_webcal_msg(message):
    send_calendar_main_msg(message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('question_answer'))
def callback_question_answer_msg(call):
    def process_answer_step(inner_msg):
        if inner_msg.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            controller.show_main_menu(inner_msg.chat.id)
            return
        db = SQLighter(db_name)
        try:
            with shelve.open(shelve_name) as storage:
                shelve_users = storage['users']
                user_id = shelve_users[inner_msg.chat.id]['answer']['user_id']
                question_id = shelve_users[inner_msg.chat.id]['answer']['question_id']
                del shelve_users[inner_msg.chat.id]['answer']
                storage['users'] = shelve_users
            text = '<i>–ü–æ–º–Ω–∏—à—å, —Ç—ã –∑–∞–¥–∞–≤–∞–ª –º–Ω–µ –≤–æ–ø—Ä–æ—Å? ' \
                   '–Ø —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ –ø–æ–¥—É–º–∞–ª, –∏ –≤–æ—Ç –º–æ–π –æ—Ç–≤–µ—Ç:</i>\n\n%s' % inner_msg.text
            bot.send_message(user_id, text, reply_to_message_id=question_id, parse_mode='HTML')
            bot.edit_message_text('–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å', call.message.chat.id, call.message.message_id)
            db.answer_user_question(user_id, question_id, inner_msg.chat.id, inner_msg.message_id)
        except Exception as e:
            print(str(e))
        controller.show_main_menu(inner_msg.chat.id)

    user_id, question_id = controller.get_call_data(call.data)[2:]
    with shelve.open(shelve_name) as storage:
        shelve_users = storage['users']
        if call.message.chat.id not in shelve_users:
            shelve_users[call.message.chat.id] = {}
        shelve_users[call.message.chat.id]['answer'] = {
            'user_id': user_id,
            'question_id': question_id
        }
        storage['users'] = shelve_users
    msg = bot.send_message(call.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"',
                           reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_answer_step)


@bot.callback_query_handler(func=lambda call: call.data.startswith('question_decline'))
def callback_question_decline_msg(call):
    user_id, question_id = controller.get_call_data(call.data)[2:]
    db = SQLighter(db_name)
    bot.edit_message_text('–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤–æ–ø—Ä–æ—Å', call.message.chat.id, call.message.message_id)
    db.answer_user_question(user_id, question_id, call.message.chat.id)
    text = '–ü–æ–º–Ω–∏—à—å, —Ç—ã –∑–∞–¥–∞–≤–∞–ª —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å? –Ø –ø–æ–¥—É–º–∞–ª... –ò —Ä–µ—à–∏–ª –Ω–∞ –Ω–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å üòÑ ' \
           '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç üòä'
    keyboard = types.InlineKeyboardMarkup()
    callback_data = 'question_custom_%d_%d' % (user_id, question_id)
    button = types.InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data=callback_data)
    keyboard.add(button)
    bot.send_message(user_id, text, reply_to_message_id=question_id, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_getdate'))
def callback_schedule_getdate_msg(call):
    calendar_index = controller.get_call_data(call.data)[2]
    db = SQLighter(db_name)
    calendar = db.get_calendar_by_index(calendar_index)
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = []
    for day in range(8, 13):
        callback_data = 'schedule_gettime_%d_%d' % (calendar_index, day)
        button = types.InlineKeyboardButton('%d –∏—é–Ω—è' % day, callback_data=callback_data)
        buttons.append(button)
    callback_data = 'schedule_main' if calendar_index == -1 else 'schedule_area_%d' % calendar_index
    button = types.InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data=callback_data)
    buttons.append(button)
    keyboard.add(*buttons)
    if calendar_index == -1:
        text = '<b>–í—Å–µ</b> –ø–ª–æ—â–∞–¥–∫–∏'
    else:
        text = '–ü–ª–æ—â–∞–¥–∫–∞ <b>"%s"</b>' % calendar['name']
    text += '\n\n–ö–∞–∫–æ–π –¥–µ–Ω—å —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                          parse_mode='HTML', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_gettime'))
def callback_schedule_gettime_msg(call):
    calendar_index, day = controller.get_call_data(call.data)[2:]
    controller.send_gettime_msg(call, calendar_index, day, False)


@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_insert'))
def callback_schedule_insert_msg(call):
    calendar_index, event_index = controller.get_call_data(call.data)[2:]
    db = SQLighter(db_name)
    calendar = db.get_calendar_by_index(calendar_index)
    event = db.get_event_by_index(event_index)
    event_count = db.get_event_liked_count(event['calendar_id'], event['id_event'])
    db.insert_user_event(call.message.chat.id, calendar['id_calendar'], event['id_event'])
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(
        'üóëÔ∏è–£–¥–∞–ª–∏—Ç—å %d' % (event_count + 1),
        callback_data='schedule_delete_%d_%d' % (calendar_index, event_index))
    keyboard.add(button)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_delete'))
def callback_schedule_delete_msg(call):
    calendar_index, event_index = controller.get_call_data(call.data)[2:]
    db = SQLighter(db_name)
    calendar = db.get_calendar_by_index(calendar_index)
    event = db.get_event_by_index(event_index)
    event_count = db.get_event_liked_count(event['calendar_id'], event['id_event'])
    db.delete_user_event(call.message.chat.id, calendar['id_calendar'], event['id_event'])
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(
        '‚≠ê –î–æ–±–∞–≤–∏—Ç—å %d' % (event_count - 1),
        callback_data='schedule_insert_%d_%d' % (calendar_index, event_index))
    keyboard.add(button)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_area'))
def callback_schedule_area_msg(call):
    keyboard = types.InlineKeyboardMarkup()
    db = SQLighter(db_name)
    calendars = db.get_calendars()
    for i in range(0, len(calendars)):
        text = calendars[i]['name']
        button = types.InlineKeyboardButton(text=text, callback_data=('schedule_getdate_%d' % i))
        keyboard.add(button)
    button = types.InlineKeyboardButton(text='‚Ü© –ù–∞–∑–∞–¥', callback_data='schedule_main')
    keyboard.add(button)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_my'))
def callback_schedule_my_msg(call):
    db = SQLighter(db_name)
    db_events = [{
        'calendar_id': e['calendar_id'],
        'event_id': e['event_id']
    } for e in db.get_user_events(call.message.chat.id)]
    events = gcal_api.get_events(db_events)
    for event in events:
        callback_data = 'schedule_delete_%d_%d' % (event['calendar_index'], event['event_index'])
        keyboard = types.InlineKeyboardMarkup()
        event_count = db.get_event_liked_count(event['calendar_id'], event['id'])
        button = types.InlineKeyboardButton('üóëÔ∏è–£–¥–∞–ª–∏—Ç—å %d' % event_count, callback_data=callback_data)
        keyboard.add(button)
        text = '<b>%s</b>\n–ü–ª–æ—â–∞–¥–∫–∞ <i>"%s"</i>' % (event['name'], event['area'])
        if event['location']:
            text += '\n' + event['location']
        text += '\n' + controller.get_formatted_event_date(event['datetime_start'], event['datetime_end'])
        bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=keyboard)
    if not events:
        bot.send_message(call.message.chat.id, '–Ø –¥–æ–±–∞–≤–ª—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å '
                                               '–ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –Ω–∞–∂–º–µ—à—å –∫–Ω–æ–ø–∫—É\n"‚≠ê –î–æ–±–∞–≤–∏—Ç—å"')


@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_main'))
def callback_schedule_main_msg(call):
    send_calendar_main_msg(call.message, True)


@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_printevent'))
def callback_schedule_printevent_msg(call):
    # call.data = 'schedule_{{type}}_{{calendar_index}}_{{day}}_{{time_min}}_{{time_max}}'
    calendar_index, day, hour_min, hour_max = controller.get_call_data(call.data)[2:]
    db = SQLighter(db_name)
    calendar = db.get_calendar_by_index(calendar_index)
    calendar_id = None if calendar_index == -1 else calendar['id_calendar']
    time_min = dateutil.parser.parse('2017-06-%dT%d:00:00' % (day, hour_min))
    if hour_max < 24:
        time_max = dateutil.parser.parse('2017-06-%dT%d:00:00' % (day, hour_max))
    else:
        time_max = dateutil.parser.parse('2017-06-%dT00:00:00' % (day + 1))
    events = gcal_api.get_calendar_events(calendar_id=calendar_id, time_min=time_min, time_max=time_max)
    db = SQLighter(db_name)
    db_events = db.get_user_events(call.message.chat.id)
    for event in events:
        keyboard = types.InlineKeyboardMarkup()
        event_count = db.get_event_liked_count(event['calendar_id'], event['id'])
        if not any(x for x in db_events
                   if x['user_id'] == call.message.chat.id
                   and x['calendar_id'] == event['calendar_id']
                   and x['event_id'] == event['id']):
            callback_data = 'schedule_insert_%d_%d' % (event['calendar_index'], event['event_index'])
            button = types.InlineKeyboardButton('‚≠ê –î–æ–±–∞–≤–∏—Ç—å %d' % event_count, callback_data=callback_data)
        else:
            callback_data = 'schedule_delete_%d_%d' % (event['calendar_index'], event['event_index'])
            button = types.InlineKeyboardButton('üóëÔ∏è–£–¥–∞–ª–∏—Ç—å %d' % event_count, callback_data=callback_data)
        keyboard.add(button)
        text = '<b>%s</b>\n–ü–ª–æ—â–∞–¥–∫–∞ <i>"%s"</i>' % (event['name'], event['area'])
        if event['location']:
            text += '\n' + event['location']
        text += '\n' + controller.get_formatted_event_date(event['datetime_start'], event['datetime_end'])
        bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=keyboard)
    if events:
        controller.send_gettime_msg(call, calendar_index, day)
    else:
        if calendar:
            text = '–í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ <b>"%s"</b> —Å <b>%d:00</b> –ø–æ <b>%d:00</b> –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π' % \
                   (calendar['name'], hour_min, hour_max)
        else:
            text = '–° <b>%d:00</b> –ø–æ <b>%d:00</b> –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π' % (hour_min, hour_max)
        keyboard = controller.get_time_inline_keyboard(calendar_index, day)
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id,
                              parse_mode='HTML', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('question_show'))
def callback_question_show_msg(call):
    question_index = controller.get_call_data(call.data)[2]
    with open('faq.json', 'r', encoding='utf-8') as f:
        faq = json.load(f)
    question = faq[question_index]
    text = '<b>–í–û–ü–†–û–°:</b>\n%s\n\n<b>–û–¢–í–ï–¢:</b>\n%s' % (question['question'], question['answer'])
    keyboard = None
    if question['inline_keyboard_urls']:
        keyboard = types.InlineKeyboardMarkup()
        for url in question['inline_keyboard_urls']:
            button = types.InlineKeyboardButton(text=url['text'], url=url['url'])
            keyboard.add(button)
    with shelve.open(shelve_name) as storage:
        shelve_users = storage['users']
        message_id = shelve_users[call.message.chat.id]['faq_message_id']
        if not message_id:
            msg = bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=keyboard)
            shelve_users[call.message.chat.id]['faq_message_id'] = msg.message_id
            storage['users'] = shelve_users
        else:
            bot.edit_message_text(text, call.message.chat.id, message_id, parse_mode='HTML', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('question_custom'))
def callback_question_custom_msg(call):
    def process_custom_question_step(inner_msg):
        if inner_msg.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            controller.show_main_menu(inner_msg.chat.id)
            return
        controller.add_user_question(inner_msg.chat.id, inner_msg.message_id)
        bot.send_message(inner_msg.chat.id, '–•–º–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–π –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–¥ –Ω–∏–º –ø–æ–¥—É–º–∞—Ç—å üòä')
        controller.show_main_menu(inner_msg.chat.id)

    keyboard = types.ReplyKeyboardRemove()
    text = '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏ "–û—Ç–º–µ–Ω–∞"'
    msg = bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_custom_question_step)


@bot.message_handler(func=lambda msg: msg.text == '‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã')
def handle_faq_msg(message):
    with shelve.open(shelve_name) as storage:
        shelve_users = storage['users']
        if message.chat.id not in shelve_users:
            shelve_users[message.chat.id] = {}
        shelve_users[message.chat.id]['faq_message_id'] = None
        storage['users'] = shelve_users
    controller.send_faq_msg(message.chat.id)


@bot.message_handler(func=lambda msg: msg.text == 'üë´ –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è')
def handle_networking_msg(message):
    db = SQLighter(db_name)
    if not db.user_sended_info(message.chat.id):
        text = '–ü—Ä–µ–∂–¥–µ, —á–µ–º –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ. ' \
               '–í—Å–µ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–º–æ–≥—É—Ç –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, ' \
               '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n\n[1/4]\n–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–ø–æ–º–Ω–∏ –±—ã–ª –ª–∏ —Ç—ã ' \
               '–Ω–∞ –≠—Ç–Ω–æ—Ñ–µ—Å—Ç–∏–≤–∞–ª–µ "–ù–µ–±–æ –∏ –ó–µ–º–ª—è" —Ä–∞–Ω—å—à–µ?'
        keyboard = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton('–î–∞', callback_data='networking_first_0'),
            types.InlineKeyboardButton('–ù–µ—Ç', callback_data='networking_first_1')
        ]
        keyboard.add(*buttons)
        bot.send_message(message.chat.id, text, reply_markup=keyboard)
        return
    if not db.get_user_forward_message(message.chat.id):
        text = '–ù–∞–∂–º–∏ /networking, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≠—Ç–Ω–æ—Ñ–µ—Å—Ç–∏–≤–∞–ª—è!'
        bot.send_message(message.chat.id, text)
        return
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data='networking_edit'))
    buttons = []
    user = db.get_user(message.chat.id)
    if user['age'] >= 18:
        button = types.InlineKeyboardButton('–ù–∞–π—Ç–∏ ‚ù§', callback_data='networking_love')
        buttons.append(button)
    button = types.InlineKeyboardButton('–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∞', callback_data='networking_friend')
    buttons.append(button)
    keyboard.add(*buttons)
    text = '–í—ã–±–µ—Ä–∏, —Å –∫–µ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è'
    bot.send_message(message.chat.id, text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_edit'))
def callback_networking_edit_msg(call):
    db = SQLighter(db_name)
    db.remove_user_info(call.message.chat.id)
    handle_networking_msg(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_like'))
def callback_networking_like_msg(call):
    desired_user_id = controller.get_call_data(call.data)[2]
    db = SQLighter(db_name)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    db.set_desired_user(call.message.chat.id, desired_user_id, 1)
    receiver_user = db.get_user(desired_user_id)
    if db.connect_users(call.message.chat.id, desired_user_id):
        sender_user = db.get_user(call.message.chat.id)
        text = '–û–≥–æ, %s —Ç–æ–∂–µ —Ö–æ—á–µ—Ç —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –í—ã—Å—ã–ª–∞—é —Ç–µ–±–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã' % receiver_user['first_name']
        bot.send_message(sender_user['id_user'], text)
        bot.forward_message(sender_user['id_user'], receiver_user['id_user'], receiver_user['forward_message_id'])
        text = '–û–≥–æ, %s —Ç–æ–∂–µ —Ö–æ—á–µ—Ç —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –í—ã—Å—ã–ª–∞—é —Ç–µ–±–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã' % sender_user['first_name']
        bot.send_message(receiver_user['id_user'], text)
        bot.forward_message(receiver_user['id_user'], sender_user['id_user'], sender_user['forward_message_id'])
    else:
        text = '–û—Ç–ª–∏—á–Ω–æ! –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ %s —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è —Å —Ç–æ–±–æ–π –ø–æ–æ–±—â–∞—Ç—å—Å—è üòâ' % receiver_user['first_name']
        bot.send_message(call.message.chat.id, text, reply_to_message_id=call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_dislike'))
def callback_networking_dislike_msg(call):
    db = SQLighter(db_name)
    desired_user_id = controller.get_call_data(call.data)[2]
    db.set_desired_user(call.message.chat.id, desired_user_id, 0)
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_love'))
def callback_networking_love_msg(call):
    db = SQLighter(db_name)
    love_users = db.get_love_users(call.message.chat.id)
    bot.send_message(call.message.chat.id, '–°—É–ø–µ—Ä! –°–µ–π—á–∞—Å —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –ø–∞—Ä—É üòè')
    controller.send_networking_users(call.message.chat.id, love_users)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_friend'))
def callback_networking_friend_msg(call):
    call_data = controller.get_call_data(call.data)
    db = SQLighter(db_name)
    if len(call_data) < 3:
        interests = db.get_interests()
        text = '–í—ã–±–µ—Ä–∏ —Ç–µ–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–æ–æ–±—â–∞—Ç—å—Å—è'
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for interest in interests:
            callback_data = 'networking_friend_%d' % interest['id_interest']
            button = types.InlineKeyboardButton(interest['name'], callback_data=callback_data)
            keyboard.add(button)
        bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
        return
    interest_id = call_data[2]
    db.set_user_interest(call.message.chat.id, interest_id)
    friend_users = db.get_friend_users(call.message.chat.id, interest_id)
    bot.edit_message_text('–ö–ª–∞—Å—Å! –°–µ–π—á–∞—Å —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ üòä',
                          call.message.chat.id, call.message.message_id)
    controller.send_networking_users(call.message.chat.id, friend_users)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_first'))
def callback_networking_first_msg(call):
    first_time = controller.get_call_data(call.data)[2]
    db = SQLighter(db_name)
    db.set_user_first_time(call.message.chat.id, first_time)
    if not first_time:
        text = '[1/4]\n–£—Ö —Ç—ã! –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ–ø—ã—Ç!\n–•–æ—á–µ—à—å –ø–æ–º–æ–≥–∞—Ç—å, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Ö, ' \
               '–∫—Ç–æ –µ—â–µ –Ω–µ –±—ã–ª –Ω–∞ –≠—Ç–Ω–æ—Ñ–µ—Å—Ç–∏–≤–∞–ª–µ?\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—à—å "–î–∞", —è –±—É–¥—É –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ ' \
               '–ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –≠—Ç–æ —Ç–µ–±—è –Ω–∏ –∫ —á–µ–º—É –Ω–µ –æ–±—è–∑—ã–≤–∞–µ—Ç'
        keyboard = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton('–î–∞', callback_data='networking_answer_1'),
            types.InlineKeyboardButton('–ù–µ—Ç', callback_data='networking_answer_0')
        ]
        keyboard.add(*buttons)
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    else:
        callback_networking_days(call)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_answer'))
def callback_networking_answer(call):
    send_questions = controller.get_call_data(call.data)[2]
    db = SQLighter(db_name)
    db.set_user_send_questions(call.message.chat.id, send_questions)
    callback_networking_days(call)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_days'))
def callback_networking_days(call):
    def get_networking_days_inline_keyboard(user_id):
        result = types.InlineKeyboardMarkup(row_width=2)
        button = types.InlineKeyboardButton('–£ –º–µ–Ω—è –Ω–µ—Ç –±–∏–ª–µ—Ç–∞', callback_data='networking_buy')
        result.add(button)
        buttons = []
        db = SQLighter(db_name)
        for i in range(8, 13):
            visit = db.user_visits_day(user_id, i)
            text = '‚úÖ' if visit else 'üî≤'
            text += ' %d –∏—é–Ω—è' % i
            callback_data = 'networking_days_%d_%d' % (i, int(not visit))
            button = types.InlineKeyboardButton(text, callback_data=callback_data)
            buttons.append(button)
        button = types.InlineKeyboardButton('‚û° –î–∞–ª—å—à–µ', callback_data='networking_gender')
        buttons.append(button)
        result.add(*buttons)
        return result

    if call.data.startswith('networking_days'):
        try:
            day, visit = controller.get_call_data(call.data)[2:]
            db = SQLighter(db_name)
            db.set_user_visit_day(call.message.chat.id, day, visit)
        except:
            pass
    keyboard = get_networking_days_inline_keyboard(call.message.chat.id)
    text = '[2/4]\n–í—ã–±–µ—Ä–∏ –¥–Ω–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –µ—Ö–∞—Ç—å'
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_buy'))
def callback_networking_buy(call):
    text = '[2/4]\n–û—Ö, –æ—Ö, –æ—Ö! –ù–∞–¥–æ –ø–æ–∫—É–ø–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –ø–æ–∫–∞ –µ—Å—Ç—å –±–∏–ª–µ—Ç—ã!'
    keyboard = types.InlineKeyboardMarkup()
    links = [
        {
            'text': '–ö—É–ø–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ',
            'url': 'http://etnofestival.com/tickets'
        },
        {
            'text': '–î—Ä–µ–≤–æ –∂–∏–∑–Ω–∏ (–≤ –º–∞–≥–∞–∑–∏–Ω–µ)',
            'url': 'https://vk.com/natur_shop'
        },
        {
            'text': '–ú–ê–°–¢–ï–†–°–ö–ê–Ø –ü–û–î–ê–†–ö–û–í (–≤ –º–∞–≥–∞–∑–∏–Ω–µ)',
            'url': 'https://vk.com/hmshop72'
        }
    ]
    for link in links:
        button = types.InlineKeyboardButton(link['text'], link['url'])
        keyboard.add(button)
    button = types.InlineKeyboardButton('–ö—É–ø–ª—é –Ω–∞ –≤—Ö–æ–¥–µ', callback_data='networking_days')
    keyboard.add(button)
    button = types.InlineKeyboardButton('‚Ü© –ù–∞–∑–∞–¥', callback_data='networking_days')
    keyboard.add(button)
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_gender'))
def callback_networking_gender(call):
    try:
        if not call.data.startswith('networking_gender'):
            raise Exception()
        male = controller.get_call_data(call.data)[2]
        db = SQLighter(db_name)
        db.set_user_gender(call.message.chat.id, male)
        callback_networking_age(call)
    except:
        text = '[3/4]\n–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª'
        keyboard = types.InlineKeyboardMarkup()
        buttons = [
            types.InlineKeyboardButton('–ú—É–∂—Å–∫–æ–π', callback_data='networking_gender_1'),
            types.InlineKeyboardButton('–ñ–µ–Ω—Å–∫–∏–π', callback_data='networking_gender_0')
        ]
        keyboard.add(*buttons)
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('networking_age'))
def callback_networking_age(call):
    def process_networking_age_step(inner_msg):
        try:
            age = int(inner_msg.text)
            if not 0 <= age <= 99:
                raise Exception()
            db = SQLighter(db_name)
            db.set_user_age(inner_msg.chat.id, age)
            keyboard = controller.get_keyboard(inner_msg.chat.id)
            text = '–û—Ç–ª–∏—á–Ω–æ! –Ø —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è!\n–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ ' \
                   '–ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ /networking'
            msg = bot.send_message(inner_msg.chat.id, text, reply_markup=keyboard)
        except Exception as e:
            print(str(e))
            text = '[4/4]\n–£–ø—Å! –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!'
            msg = bot.send_message(inner_msg.chat.id, text)
            bot.register_next_step_handler(msg, process_networking_age_step)

    text = '[4/4]\n–ö–ª–∞—Å—Å! –í–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç'
    keyboard = types.ReplyKeyboardRemove()
    msg = bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
    bot.register_next_step_handler(msg, process_networking_age_step)


@bot.message_handler(func=lambda msg: msg.text == 'üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
def handle_logout_msg(message):
    db = SQLighter(db_name)
    db.set_admin(message.chat.id, 0)
    bot.send_message(message.chat.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                     reply_markup=controller.user_keyboard)


@bot.message_handler(func=lambda msg: msg.text == '‚ùì –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã')
def handle_answer_user_questions_msg(message):
    controller.send_user_questions(message.chat.id, False)


@bot.message_handler(func=lambda msg: msg.text == 'üìß –†–∞—Å—Å—ã–ª–∫–∞')
def handle_newsletter_msg(message):
    def process_newsletter_step(inner_msg):
        def process_newsletter_answer_step(inner_msg2):
            if inner_msg2.text == '‚úî –û—Ç–ø—Ä–∞–≤–∏—Ç—å':
                controller.send_newsletter(inner_msg2.chat.id)
                bot.send_message(inner_msg2.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
                                 reply_markup=controller.admin_keyboard)
                return
            if inner_msg2.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å':
                msg = bot.send_message(inner_msg2.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª',
                                       reply_markup=types.ReplyKeyboardRemove())
                bot.register_next_step_handler(msg, process_newsletter_step)
                return
            if inner_msg2.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':
                bot.send_message(inner_msg2.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                                 reply_markup=controller.admin_keyboard)
                return
            msg = bot.send_message(inner_msg2.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É')
            bot.register_next_step_handler(msg, process_newsletter_answer_step)

        with shelve.open(shelve_name) as storage:
            user_dict = storage['users']
            user_dict[str(inner_msg.chat.id)]['newsletter_messages'].append(inner_msg)
            storage['users'] = user_dict

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup = [
            ['‚úî –û—Ç–ø—Ä–∞–≤–∏—Ç—å'],
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']
        ]
        controller.set_reply_keyboard_markup(keyboard, markup)
        msg = bot.send_message(inner_msg.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ —Ä–∞—Å—Å—ã–ª–∫—É', reply_markup=keyboard)
        bot.register_next_step_handler(msg, process_newsletter_answer_step)

    with shelve.open(shelve_name) as storage:
        user_dict = storage['users']
        user_dict[str(message.chat.id)] = {'newsletter_messages': []}
        storage['users'] = user_dict
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª',
                           reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_newsletter_step)


# @bot.message_handler(func=lambda msg: True)
# def handle_any_msg(message):
#     controller.show_main_menu(message.chat.id)


def main():
    # controller.show_main_menu()
    bot.polling(none_stop=True)


if __name__ == '__main__':
    main()
